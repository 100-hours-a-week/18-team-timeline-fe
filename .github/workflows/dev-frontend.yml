name: Dev Frontend CI/CD

on:
  push:
    branches:
      - develop
jobs:
  # 0. 정밀 CI 테스트 (브랜치 전체)
  test:
    name: Frontend Type Check, Lint, Build & Unit Test
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Type Check
        run: npx tsc --noEmit

      #- name: Lint
      #  run: npm run lint

      - name: Build
        run: npm run build

      - name: Unit Test
      #  run: npm run test
        run: echo "No Unit test defined"

  # 1. 간단 CI (기존 유지)
  frontend-ci:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Run tests (optional)
        run: npm run test || echo "Test skipped"
        working-directory: frontend

      - name: Create .env file from GitHub Secrets
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> frontend/.env
          echo "VITE_FRONTEND_BASE_URL=${{ secrets.VITE_FRONTEND_BASE_URL }}" >> frontend/.env

  # 2. ECR Push 
  build-and-push:
    name: Docker Build & ECR Push (main only)
    needs: [frontend-ci, test]  # ✅ 두 job 모두 성공해야 실행됨
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write
    
    env:
      REG: ${{ secrets.DEV_ECR_URI_FE }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::346011888304:role/github-action-role
          aws-region: ap-northeast-2

      - name: Create .env file from GitHub Secrets
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> frontend/.env
          echo "VITE_FRONTEND_BASE_URL=${{ secrets.VITE_FRONTEND_BASE_URL }}" >> frontend/.env

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get short commit SHA
        id: meta
        run: echo "tag=$(echo $GITHUB_SHA | cut -c1-7)" >> "$GITHUB_OUTPUT"
     
      - name: Build Docker image
        run: |
          docker build \
                --build-arg OTEL_EXPORTER_OTLP_ENDPOINT=${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }} \
                -t $REG:latest \
                -t $REG:${{ steps.meta.outputs.tag }} \
                -f ./frontend/Dockerfile.dev \
                ./frontend


      - name: Push Docker image
        run: |
          docker push $REG:latest
          docker push $REG:${{ steps.meta.outputs.tag }}

  remote-deploy:
    name: SSH into Peered Instance and Deploy Frontend
    runs-on: ubuntu-latest
    needs: [frontend-ci, test,build-and-push]

    env:
      TAG: ${{ github.sha }}
      ECR_URI_FE: ${{ secrets.DEV_ECR_URI_FE }}
      FRONTEND_EC2_IP: ${{ secrets.DEV_FRONTEND_EC2_IP }}
      VITE_API_BASE_URL: ${{ secrets.DEV_VITE_API_BASE_URL }}
      VITE_FRONTEND_BASE_URL: ${{ secrets.DEV_VITE_FRONTEND_BASE_URL }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: SSH into Peered EC2 and deploy to Frontend EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PEER_HOST }}
          username: ${{ secrets.PEER_USER }}
          key: ${{ secrets.PEER_SSH_KEY }}
          envs: |
            TAG=${{ github.sha }}
            ECR_URI_FE=${{ secrets.DEV_ECR_URI_FE }}
            FRONTEND_EC2_IP=${{ secrets.DEV_FRONTEND_EC2_IP }}
            VITE_API_BASE_URL=${{ secrets.DEV_VITE_API_BASE_URL }}
            VITE_FRONTEND_BASE_URL=${{ secrets.DEV_VITE_FRONTEND_BASE_URL }}
          script: |
            echo "🔄 피어링 인스턴스 접속 완료 - 프론트엔드 EC2로 SSH 진입"

            echo "👉 연결 대상 IP: ${{ env.FRONTEND_EC2_IP }}"

            if [ ! -f ~/.ssh/backend_key.pem ]; then
              echo "❗ 프론트엔드 EC2 접속용 키가 없습니다: ~/.ssh/backend_key.pem"
              exit 1
            fi
            chmod 400 ~/.ssh/backend_key.pem

            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/backend_key.pemubuntu@${{ env.FRONTEND_EC2_IP }} << EOF
              echo "🚀 프론트엔드 EC2에서 Docker Pull 및 컨테이너 실행 시작"

              echo "ECR URI 확인: \$ECR_URI_FE"
              aws ecr get-login-password --region ap-northeast-2 \
                | sudo docker login --username AWS --password-stdin \$ECR_URI_FE

              # 기존 컨테이너 제거
              sudo docker ps -a -q --filter "name=dev-frontend" | grep -q . && sudo docker rm -f dev-frontend

              # 새 컨테이너 실행
              sudo docker run -d --name dev-frontend \
                -p 3000:80 \
                -e VITE_API_BASE_URL=\$VITE_API_BASE_URL \
                -e VITE_FRONTEND_BASE_URL=\$VITE_FRONTEND_BASE_URL \
                \$ECR_URI_FE:latest

              echo "✅ 프론트엔드 컨테이너 실행 완료"
            EOF
          